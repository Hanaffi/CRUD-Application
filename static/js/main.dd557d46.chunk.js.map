{"version":3,"sources":["components/CourseForm.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["CourseForm","props","onSubmit","addCourse","type","onChange","updateCourse","value","current","CourseList","state","isEdit","renderCourse","details","name","onClick","toggleState","deleteCourse","index","setState","updateCourseItem","e","preventDefault","editCourse","input","renderUpdateForm","ref","v","defaultValue","this","Component","App","courses","target","push","console","log","splice","courseList","map","course","key","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sNAWeA,G,MATI,SAACC,GAChB,OACI,0BAAMC,SAAUD,EAAME,WAClB,2BAAOC,KAAK,OAAOC,SAAUJ,EAAMK,aAAcC,MAAON,EAAMO,UAC9D,4BAAQJ,KAAK,UAAb,iBC2DGK,E,4MA9DXC,MAAM,CACFC,QAAO,G,EAMXC,aAAe,WACX,OACQ,4BACI,8BAAO,EAAKX,MAAMY,QAAQC,MAC1B,4BAAQC,QAAU,WAAM,EAAKC,eAAgBZ,KAAK,UAAlD,eACA,4BAAQW,QAAU,WAAO,EAAKd,MAAMgB,aAAa,EAAKhB,MAAMiB,SAA5D,mB,EAMhBF,YAAc,WAAK,IACVL,EAAQ,EAAKD,MAAbC,OACL,EAAKQ,SAAS,CACVR,QAAQA,K,EAKhBS,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKrB,MAAMsB,WAAW,EAAKtB,MAAMiB,MAAQ,EAAKM,MAAMjB,OACpD,EAAKS,e,EAKTS,iBAAmB,WACf,OACI,0BAAMvB,SAAU,EAAKkB,kBACjB,2BAAOhB,KAAK,OAAQsB,IAAK,SAACC,GAAK,EAAKH,MAAMG,GAAKC,aAAc,EAAK3B,MAAMY,QAAQC,OAChF,mD,uDAeR,OACI,kBAAC,WAAD,KACKe,KAAKnB,MAAMC,OAAQkB,KAAKJ,mBAAqBI,KAAKjB,oB,GAxD1CkB,aCqEVC,E,4MAjEbrB,MAAM,CACJsB,QAAQ,CACN,CAAClB,KAAK,QACN,CAACA,KAAK,OACN,CAACA,KAAK,OAERN,QAAQ,I,EAIVF,aAAc,SAACe,GACb,EAAKF,SAAS,CACZX,QAAQa,EAAEY,OAAO1B,S,EAIrBJ,UAAW,SAACkB,GACVA,EAAEC,iBAEF,IAAId,EAAQ,EAAKE,MAAMF,QACnBwB,EAAQ,EAAKtB,MAAMsB,QACT,IAAXxB,IAEDwB,EAAQE,KAAK,CAACpB,KAAKN,IACnB,EAAKW,SAAS,CACZa,UACAxB,QAAQ,O,EAOdS,aAAc,SAACC,GACbiB,QAAQC,IAAIlB,GADS,IAEhBc,EAAW,EAAKtB,MAAhBsB,QACLA,EAAQK,OAAOnB,EAAM,GACrB,EAAKC,SAAS,CAACa,a,EAIjBT,WAAW,SAACL,EAAOX,GAEjB,IAAIyB,EAAQ,EAAKtB,MAAMsB,QACTA,EAAQd,GAChB,KAASX,EACf,EAAKY,SAAS,CAACa,a,uDAIhB,IAAD,OAGQM,EADYT,KAAKnB,MAAhBsB,QACoBO,KAAK,SAACC,EAAStB,GACzC,OAAQ,kBAAC,EAAD,CAAYD,aAAc,EAAKA,aAAcC,MAAOA,EAAOL,QAAS2B,EAAQC,IAAKvB,EAAOK,WAAY,EAAKA,gBAElH,OACE,6BAASmB,UAAU,OACjB,gDACA,4BAAKJ,GACL,kBAAC,EAAD,CAAa9B,QAASqB,KAAKnB,MAAMF,QAASL,UAAW0B,KAAK1B,UAAWG,aAAgBuB,KAAKvB,oB,GA7DhFwB,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.dd557d46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CourseForm = (props)=>{\r\n    return(\r\n        <form onSubmit={props.addCourse}>\r\n            <input type=\"text\" onChange={props.updateCourse} value={props.current}/>\r\n            <button type=\"submit\">Add Course</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default CourseForm;","import React , {Component,Fragment} from 'react';\r\n\r\nclass CourseList extends Component{\r\n    state={\r\n        isEdit:false\r\n    }\r\n\r\n\r\n\r\n\r\n    renderCourse = ()=>{\r\n        return(\r\n                <li>\r\n                    <span>{this.props.details.name}</span> \r\n                    <button onClick={ ()=> {this.toggleState()}} type=\"submit\">Edit Course</button>\r\n                    <button onClick= {() => {this.props.deleteCourse(this.props.index)}}>Delete Course</button>\r\n\r\n                </li>\r\n        )\r\n    }\r\n\r\n    toggleState = ()=>{\r\n        let {isEdit}=this.state;\r\n        this.setState({\r\n            isEdit:!isEdit\r\n        })\r\n    }\r\n\r\n\r\n    updateCourseItem = (e)=>{\r\n        e.preventDefault();\r\n        this.props.editCourse(this.props.index , this.input.value);\r\n        this.toggleState();\r\n\r\n    }\r\n\r\n    \r\n    renderUpdateForm = ()=>{\r\n        return(\r\n            <form onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\"  ref={(v)=>{this.input=v}}  defaultValue={this.props.details.name}/>\r\n                <button>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render()\r\n    {\r\n        return(\r\n            <Fragment>\r\n                {this.state.isEdit? this.renderUpdateForm() : this.renderCourse()}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CourseList;","import React , {Component} from 'react';\nimport './App.css';\nimport CourseForm from './components/CourseForm';\nimport CourseList from './components/CourseList';\n\nclass App extends Component {\n  state={\n    courses:[\n      {name:\"HTML\"},\n      {name:\"CSS\"},\n      {name:\"JS\"}\n    ] ,\n    current:''\n  }\n\n  //updateCourse\n  updateCourse= (e)=>{\n    this.setState({\n      current:e.target.value\n    })\n  }\n  //addCourse\n  addCourse= (e)=>{\n    e.preventDefault();\n\n    let current=this.state.current;\n    let courses=this.state.courses;\n    if(current != '')\n    {\n      courses.push({name:current})\n      this.setState({\n        courses,\n        current:''\n      })\n    }\n    \n    \n  }\n  //deleteCourse\n  deleteCourse= (index)=>{\n    console.log(index)\n    let {courses} = this.state;\n    courses.splice(index,1);\n    this.setState({courses})\n  }\n\n  //editCourse\n  editCourse=(index ,value)=>{\n    \n    let courses=this.state.courses;\n    let course =  courses[index];\n    course['name']=value;\n    this.setState({courses})\n  }\n\n  render()\n  {\n\n    const {courses} = this.state;\n    const courseList = courses.map( (course , index) =>{\n     return  <CourseList deleteCourse={this.deleteCourse} index={index} details={course} key={index} editCourse={this.editCourse}/>\n    })\n    return (\n      <section className=\"App\">\n        <h2>CRUD Application</h2>\n        <ul>{courseList}</ul>\n        <CourseForm  current={this.state.current} addCourse={this.addCourse} updateCourse = {this.updateCourse}/>\n      </section>\n  ) }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}